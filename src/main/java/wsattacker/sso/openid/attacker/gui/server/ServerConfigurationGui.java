package wsattacker.sso.openid.attacker.gui.server;

import java.awt.event.ActionEvent;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import wsattacker.sso.openid.attacker.log.RequestType;
import wsattacker.sso.openid.attacker.server.exception.OpenIdAttackerServerException;
import wsattacker.sso.openid.attacker.server.status.Status;

public class ServerConfigurationGui extends javax.swing.JPanel {

    /**
     * Creates new form ServerConfigurationGui
     */
    public ServerConfigurationGui() {
        initComponents();
        associationTable.setDefaultRenderer(Date.class, new DateRenderer());
        logTable.setDefaultRenderer(Date.class, new DateRenderer());
        logTable.setDefaultRenderer(RequestType.class, new TypeRenderer());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        controller = new wsattacker.sso.openid.attacker.controller.ServerController();
        startButtonColorConverter = new wsattacker.sso.openid.attacker.gui.server.StartButtonColorConverter();
        portLabel = new javax.swing.JLabel();
        associationPrefixLabel = new javax.swing.JLabel();
        associationPrefixValue = new javax.swing.JTextField();
        expirationLabel = new javax.swing.JLabel();
        interceptLabel = new javax.swing.JLabel();
        performAttackLabel = new javax.swing.JLabel();
        portText = new javax.swing.JTextField();
        expirationText = new javax.swing.JTextField();
        interceptCheckbox = new javax.swing.JCheckBox();
        performAttackCheckbox = new javax.swing.JCheckBox();
        statusLabel = new javax.swing.JLabel();
        statusValue = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        associationScrollPane1 = new javax.swing.JScrollPane();
        associationTable = new javax.swing.JTable();
        logScrollPane = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();

        setName("Server Configuration"); // NOI18N

        portLabel.setText("Server Listen Port:");

        associationPrefixLabel.setText("Association Prefix:");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.associationPrefix}"), associationPrefixValue, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        expirationLabel.setText("Association Expiration Time:");

        interceptLabel.setText("Intercept IdP Response:");

        performAttackLabel.setText("Perform Attack:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.serverListenPort}"), portText, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.associationExpirationInSeconds}"), expirationText, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.interceptIdPResponse}"), interceptCheckbox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.performAttack}"), performAttackCheckbox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        statusLabel.setText("Server Status:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, controller, org.jdesktop.beansbinding.ELProperty.create("${server.serverStatusline}"), statusValue, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        startButton.setText("Start");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, controller, org.jdesktop.beansbinding.ELProperty.create("${server.status}"), startButton, org.jdesktop.beansbinding.BeanProperty.create("background"), "startButtonColor");
        binding.setConverter(startButtonColorConverter);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${server.status}"), startButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"), "");
        binding.setConverter(new org.jdesktop.beansbinding.Converter<Status, Boolean>() {
            @Override
            public Boolean convertForward(Status value) {
                return Status.STOPPED.equals(value);
            }

            @Override
            public Status convertReverse(Boolean value) {
                throw new UnsupportedOperationException("Read only!");
            }
        });
        bindingGroup.addBinding(binding);

        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${server.status}"), stopButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        binding.setConverter(new org.jdesktop.beansbinding.Converter<Status, Boolean>() {
            @Override
            public Boolean convertForward(Status value) {
                return Status.RUNNING.equals(value);
            }

            @Override
            public Status convertReverse(Boolean value) {
                throw new UnsupportedOperationException("Read only!");
            }
        });
        bindingGroup.addBinding(binding);

        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        title.setText("Server Overview");

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${server.store.associationList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, controller, eLProperty, associationTable, "associationTable");
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${handle}"));
        columnBinding.setColumnName("Handle");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${expiry}"));
        columnBinding.setColumnName("Expiry");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${type}"));
        columnBinding.setColumnName("Type");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        associationScrollPane1.setViewportView(associationTable);

        logTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${requestLog}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, controller, eLProperty, logTable, "log");
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${type}"));
        columnBinding.setColumnName("Type");
        columnBinding.setColumnClass(wsattacker.sso.openid.attacker.log.RequestType.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${date}"));
        columnBinding.setColumnName("Date");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${text}"));
        columnBinding.setColumnName("Text");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        logScrollPane.setViewportView(logTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statusLabel)
                            .addComponent(performAttackLabel)
                            .addComponent(portLabel)
                            .addComponent(associationPrefixLabel)
                            .addComponent(expirationLabel)
                            .addComponent(interceptLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portText)
                            .addComponent(expirationText)
                            .addComponent(associationPrefixValue)
                            .addComponent(statusValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(performAttackCheckbox)
                                    .addComponent(interceptCheckbox)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(stopButton)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(associationScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {startButton, stopButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(associationPrefixLabel)
                    .addComponent(associationPrefixValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expirationLabel)
                    .addComponent(expirationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interceptLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(interceptCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(performAttackLabel)
                    .addComponent(performAttackCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(statusValue, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(associationScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        getAccessibleContext().setAccessibleName("Server Configuration");

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try {
            controller.getServer().start();
        } catch (OpenIdAttackerServerException ex) {
            Logger.getLogger(ServerConfigurationGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        try {
            controller.getServer().stop();
        } catch (OpenIdAttackerServerException ex) {
            Logger.getLogger(ServerConfigurationGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stopButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel associationPrefixLabel;
    private javax.swing.JTextField associationPrefixValue;
    private javax.swing.JScrollPane associationScrollPane1;
    private javax.swing.JTable associationTable;
    private wsattacker.sso.openid.attacker.controller.ServerController controller;
    private javax.swing.JLabel expirationLabel;
    private javax.swing.JTextField expirationText;
    private javax.swing.JCheckBox interceptCheckbox;
    private javax.swing.JLabel interceptLabel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTable logTable;
    private javax.swing.JCheckBox performAttackCheckbox;
    private javax.swing.JLabel performAttackLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portText;
    private javax.swing.JButton startButton;
    private wsattacker.sso.openid.attacker.gui.server.StartButtonColorConverter startButtonColorConverter;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusValue;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel title;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
