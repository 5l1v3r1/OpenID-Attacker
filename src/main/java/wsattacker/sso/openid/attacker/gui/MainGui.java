package wsattacker.sso.openid.attacker.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.WindowConstants;
import wsattacker.sso.openid.attacker.bootstrap.Bootstrap;
import wsattacker.sso.openid.attacker.config.XmlPersistenceError;
import wsattacker.sso.openid.attacker.config.XmlPersistenceHelper;
import wsattacker.sso.openid.attacker.controller.ServerController;
import wsattacker.sso.openid.attacker.gui.attack.AttackOverviewGui;
import wsattacker.sso.openid.attacker.gui.discovery.html.HtmlConfigurationGui;
import wsattacker.sso.openid.attacker.gui.discovery.xrds.XrdsConfigurationGui;
import wsattacker.sso.openid.attacker.gui.log.LogGui;
import wsattacker.sso.openid.attacker.gui.profile.ProfileGui;
import wsattacker.sso.openid.attacker.gui.server.ServerConfigurationGui;
import wsattacker.sso.openid.attacker.gui.user.AttackDataGui;
import wsattacker.sso.openid.attacker.gui.user.ValidDataGui;
import wsattacker.sso.openid.attacker.gui.utilities.XmlFileFilter;

/**
 * This is the main GUI class which will be started from the JAR.
 */
public class MainGui extends javax.swing.JFrame {

    /**
     * Creates new form MainGui
     */
    public MainGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveFileChooser = new JFileChooser();
        loadFileChooser = new JFileChooser();
        xmlFileFilter = new XmlFileFilter();
        controller = new ServerController();
        tabs = new JTabbedPane();
        serverConfigurationGui = new ServerConfigurationGui();
        htmlConfigurationGui = new HtmlConfigurationGui();
        xrdsConfigurationGui1 = new XrdsConfigurationGui();
        validDataGui = new ValidDataGui();
        attackData = new AttackDataGui();
        attackOverview = new AttackOverviewGui();
        profileGui = new ProfileGui();
        logGui = new LogGui();
        menuBar = new JMenuBar();
        fileMenu = new JMenu();
        saveItem = new JMenuItem();
        loadItem = new JMenuItem();
        exitNoConfigSave = new JMenuItem();

        saveFileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        saveFileChooser.setFileFilter(xmlFileFilter);

        loadFileChooser.setFileFilter(xmlFileFilter);
        loadFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowOpened(WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabs.addTab("Server Config", serverConfigurationGui);
        tabs.addTab("HTML Discovery", htmlConfigurationGui);
        tabs.addTab("XRDS Discovery", xrdsConfigurationGui1);
        tabs.addTab("Valid User", validDataGui);
        tabs.addTab("Attack Data", attackData);
        tabs.addTab("Attack Overview", attackOverview);
        tabs.addTab("Profiles", profileGui);
        tabs.addTab("Log Viewer", logGui);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        saveItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.ALT_MASK));
        saveItem.setText("Save Config");
        saveItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        loadItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.ALT_MASK));
        loadItem.setText("Load Config");
        loadItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadItem);

        exitNoConfigSave.setText("Exit (without saving config)");
        exitNoConfigSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitNoConfigSaveActionPerformed(evt);
            }
        });
        fileMenu.add(exitNoConfigSave);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(tabs, GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tabs, GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        int returnVal = saveFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File saveFile = saveFileChooser.getSelectedFile();
            try {
                XmlPersistenceHelper.saveConfigToFile(saveFile, controller.getConfig());
            } catch (XmlPersistenceError ex) {
                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void loadItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed
        int returnVal = loadFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File loadFile = loadFileChooser.getSelectedFile();
            try {
                XmlPersistenceHelper.mergeConfigFileToConfigObject(loadFile, controller.getConfig());
            } catch (XmlPersistenceError ex) {
                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loadItemActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Bootstrap.onStop();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Bootstrap.onStart();
    }//GEN-LAST:event_formWindowOpened

    private void exitNoConfigSaveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_exitNoConfigSaveActionPerformed
        dispose();
    }//GEN-LAST:event_exitNoConfigSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private AttackDataGui attackData;
    private AttackOverviewGui attackOverview;
    private ServerController controller;
    private JMenuItem exitNoConfigSave;
    private JMenu fileMenu;
    private HtmlConfigurationGui htmlConfigurationGui;
    private JFileChooser loadFileChooser;
    private JMenuItem loadItem;
    private LogGui logGui;
    private JMenuBar menuBar;
    private ProfileGui profileGui;
    private JFileChooser saveFileChooser;
    private JMenuItem saveItem;
    private ServerConfigurationGui serverConfigurationGui;
    private JTabbedPane tabs;
    private ValidDataGui validDataGui;
    private XmlFileFilter xmlFileFilter;
    private XrdsConfigurationGui xrdsConfigurationGui1;
    // End of variables declaration//GEN-END:variables
}
